import { GoogleGenAI, GenerateContentRequest } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const SYSTEM_INSTRUCTION = `You are an alternate history simulation engine. The user will provide a starting event, a year, and subsequent choices. Your task is to generate a compelling narrative of how history unfolds.

The main narrative you generate must be brief and impactful, strictly around 30 words. After the narrative, you must provide the year the narrative takes place.

Then, generate 2-3 minor, auto-generated historical events that happen in the years immediately following. These events should be logical consequences of the narrative but not major turning points. Each of these events should also be about 30 words and have an associated year.

Finally, present 3-4 plausible next turning points as choices for the user. These choices should be morally complex and "grey," avoiding simple good vs. evil options, and should have nuanced, potentially unforeseen consequences.

If the timeline ends, the choices array can be empty.

Your entire response must be a single, valid JSON object with the following keys:
- "narrative": A string for the main narrative.
- "year": A number representing the year of the main narrative.
- "auto_generated_events": An array of objects, where each object has "event" (string) and "year" (number) keys.
- "choices": An array of strings for the user's next choices.

Do not include any other text, explanations, or markdown fences.`;

const parseJsonResponse = <T,>(text: string): T => {
    let jsonStr = text.trim();
    const fenceRegex = /^```(\w*)?\s*\n?(.*?)\n?\s*```$/s;
    const match = jsonStr.match(fenceRegex);
    if (match && match[2]) {
      jsonStr = match[2].trim();
    }
    try {
      return JSON.parse(jsonStr) as T;
    } catch (e) {
      console.error("Failed to parse JSON response:", jsonStr);
      throw new Error("The AI returned an invalid response format. Please try again.");
    }
};

const callGeminiApi = async <T,>(request: GenerateContentRequest): Promise<T> => {
    try {
        const response = await ai.models.generateContent(request);
        return parseJsonResponse<T>(response.text);
    } catch (e) {
        if (e instanceof Error && (e.message.includes('503') || e.message.includes('UNAVAILABLE'))) {
            throw new Error("The AI model is currently overloaded. Please try again in a few moments.");
        }
        if (e instanceof Error) {
            throw new Error(`An API error occurred: ${e.message}`);
        }
        throw new Error("An unknown error occurred while contacting the AI.");
    }
};

export interface AutoGeneratedEvent {
    event: string;
    year: number;
}

export interface GameContinuation {
    narrative: string;
    year: number;
    auto_generated_events: AutoGeneratedEvent[];
    choices: string[];
}

export const getInitialEvents = async (year: number): Promise<string[]> => {
    const yearString = year < 0 ? `${-year} BC` : `${year} AD`;
    const prompt = `List 3-5 major historical turning points or significant global events that occurred in the year ${yearString}. Respond with only a JSON array of strings. Example: ["The first telephone was patented.", "The Battle of Little Bighorn took place.", "Colorado was admitted as the 38th U.S. state."]`;
    
    return callGeminiApi<string[]> ({
        model: 'gemini-2.5-flash-preview-04-17',
        contents: prompt,
        config: {
            responseMimeType: "application/json",
            temperature: 0.5,
        }
    });
};


export const startGame = async (initialEvent: string, year: number): Promise<GameContinuation> => {
    const prompt = `Start a new alternate history timeline beginning in the year ${year} with this event: "${initialEvent}". Provide the initial narrative, the year of the narrative, 2-3 auto-generated subsequent minor events, and the first set of choices.`;

    return callGeminiApi<GameContinuation>({
        model: 'gemini-2.5-flash-preview-04-17',
        contents: prompt,
        config: {
            systemInstruction: SYSTEM_INSTRUCTION,
            responseMimeType: "application/json",
            temperature: 0.8,
        }
    });
};


export const advanceTimeline = async (history: string, choice: string, lastYear: number): Promise<GameContinuation> => {
    const prompt = `The current history so far is: "${history}". The last major event occurred in ${lastYear}. The user has just made the following choice: "${choice}". Continue the narrative based on this choice, provide the year it occurs, 2-3 minor follow-up events in the subsequent years, and the next set of decisions.`;

    return callGeminiApi<GameContinuation>({
        model: 'gemini-2.5-flash',
        contents: prompt,
        config: {
            systemInstruction: SYSTEM_INSTRUCTION,
            responseMimeType: "application/json",
            temperature: 0.8,
        }
    });
};